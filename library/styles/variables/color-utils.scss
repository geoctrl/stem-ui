@use "sass:list";
@use "sass:string";
@use "sass:map";

@function generateColors($use-cases, $prefix) {
  $returnMap: ();
  @each $use-case-name, $use-case in $use-cases {
    @each $name, $colorMap in $use-case {
      @if type-of($colorMap) == map {
        @each $theme, $color in $colorMap {
          $themeList: map.get($returnMap, $theme);
          @if $themeList == null {
            $themeList: ();
          }

          $themeList: list.append($themeList, (#{--#{$prefix}-#{$name}}, $color));
          $returnMap: map.set($returnMap, $theme, $themeList);
        }
      }
    }
  }
  @return $returnMap;
}

@function buildRgb($color) {
  @return #{#{red($color)},#{green($color)},blue($color)};
}

@mixin placeColors($colorList) {
  @each $name, $value in $colorList {
    #{$name}: #{$value};
  }
}

@mixin colorAppClasses($cases) {
  @each $name, $colorList in $cases {
    $color: '';
    @if (type-of($colorList) == 'list') {
      $color: list.nth($colorList, 1);
    } @else {
      $color: $colorList;
    }
    .sui-color-#{$name} {
      @if (string.index($name, '-border')) {
        border-color: var(--sui-color-#{$name});
      }
      @else if (string.index($name, '-bg')) {
        background-color: var(--sui-color-#{$name});
      }
      @else {
        color: var(--sui-color-#{$name});
      }
    }
  }
}

@function findInBetween($startColor, $endColor, $steps) {

  @for $i from 0 through $steps {
    $weight: $steps / $i;
  }
}


$dark-text-default: #000 !default;
$light-text-default: #fff !default;

// Calculate brightness of a given color.
@function brightness($color) {
  @return ((red($color) * .299) + (green($color) * .587) + (blue($color) * .114)) / 255 * 100%;
}

// Compares contrast of a given color to the light/dark arguments and returns whichever is most "contrasty"
@function color-contrast($color, $dark: $dark-text-default, $light: $light-text-default) {
  @if $color == null {
    @return null;
  }
  @else {
    $color-brightness: brightness($color);
    $light-text-brightness: brightness($light);
    $dark-text-brightness: brightness($dark);

    @return if(abs($color-brightness - $light-text-brightness) > abs($color-brightness - $dark-text-brightness), $light, $dark);
  }
}
